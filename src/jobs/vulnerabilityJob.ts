import { fetchVulnerabilities } from "../services/nvdService";
import { connectDB, disconnectDB } from "../db/connection";
import { SlackService } from "../services/slackService";
import { SlackTokenService } from "../services/slackTokenService";
import { Request, Response } from "express";

export async function vulnerabilityCronJob(req: Request, res: Response) {
  console.log(">>>>>>> JOB STARTED <<<<<<<");

  try {
    await connectDB();

    const vulnerabilities = await fetchVulnerabilities();

    const slackTokenService = new SlackTokenService();
    const users = await slackTokenService.getAllAuthedUserTokens();
    const vulCount = vulnerabilities.length;

    if (vulCount > 0) {
      // Send vulnerability messages in parallel for each user and vulnerability
      await Promise.all(
        users.map(async (user) => {
          const slackService = new SlackService(user.access_token);
          await Promise.all(
            vulnerabilities.map((vulnerability: any) =>
              slackService.sendVulnerabilityMessage(
                vulnerability,
                user.authed_user.id,
                user.access_token,
                user.refresh_token
              )
            )
          );
        })
      );

      return res.status(200).send({
        vulnerabilities: vulCount,
        message: "Check Slack Bot.",
      });
    } else {
      return res.status(200).send({
        vulnerabilities: vulCount,
        message: "No vulnerabilities identified.",
      });
    }
  } catch (error) {
    console.error("ðŸš€ ~ vulnerabilityCronJob ~ error:", error);
    return res.status(500).send({ error: "Job execution failed." });
  } finally {
    await disconnectDB();
    console.log(">>>>>>> JOB COMPLETED <<<<<<<");
  }
}
